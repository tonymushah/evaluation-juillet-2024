// @generated by protobuf-ts 2.9.4 with parameter server_none
// @generated from protobuf file "proprietaire.proto" (package "prorietaire", syntax proto3)
// tslint:disable
import { Comptes } from "./proprietaire";
import type { ChiffreAffairesResponse } from "./proprietaire";
import type { ChiffreAffairesRequest } from "./proprietaire";
import { Biens } from "./proprietaire";
import type { ListTypeBienResponse } from "./proprietaire";
import type { ListTypeBienRequest } from "./proprietaire";
import type { Bien } from "./proprietaire";
import type { GetBienRequest } from "./proprietaire";
import type { ListBienResponse } from "./proprietaire";
import type { ListBienRequest } from "./proprietaire";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Auth } from "./proprietaire";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { LoginResponse } from "./proprietaire";
import type { LoginRequest } from "./proprietaire";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service prorietaire.Auth
 */
export interface IAuthClient {
    /**
     * @generated from protobuf rpc: Login(prorietaire.LoginRequest) returns (prorietaire.LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse>;
}
/**
 * @generated from protobuf service prorietaire.Auth
 */
export class AuthClient implements IAuthClient, ServiceInfo {
    typeName = Auth.typeName;
    methods = Auth.methods;
    options = Auth.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Login(prorietaire.LoginRequest) returns (prorietaire.LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginRequest, LoginResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service prorietaire.Biens
 */
export interface IBiensClient {
    /**
     * @generated from protobuf rpc: ListBien(prorietaire.ListBienRequest) returns (prorietaire.ListBienResponse);
     */
    listBien(input: ListBienRequest, options?: RpcOptions): UnaryCall<ListBienRequest, ListBienResponse>;
    /**
     * @generated from protobuf rpc: Get(prorietaire.GetBienRequest) returns (prorietaire.Bien);
     */
    get(input: GetBienRequest, options?: RpcOptions): UnaryCall<GetBienRequest, Bien>;
    /**
     * @generated from protobuf rpc: ListTypeBien(prorietaire.ListTypeBienRequest) returns (prorietaire.ListTypeBienResponse);
     */
    listTypeBien(input: ListTypeBienRequest, options?: RpcOptions): UnaryCall<ListTypeBienRequest, ListTypeBienResponse>;
}
/**
 * @generated from protobuf service prorietaire.Biens
 */
export class BiensClient implements IBiensClient, ServiceInfo {
    typeName = Biens.typeName;
    methods = Biens.methods;
    options = Biens.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListBien(prorietaire.ListBienRequest) returns (prorietaire.ListBienResponse);
     */
    listBien(input: ListBienRequest, options?: RpcOptions): UnaryCall<ListBienRequest, ListBienResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListBienRequest, ListBienResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Get(prorietaire.GetBienRequest) returns (prorietaire.Bien);
     */
    get(input: GetBienRequest, options?: RpcOptions): UnaryCall<GetBienRequest, Bien> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBienRequest, Bien>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListTypeBien(prorietaire.ListTypeBienRequest) returns (prorietaire.ListTypeBienResponse);
     */
    listTypeBien(input: ListTypeBienRequest, options?: RpcOptions): UnaryCall<ListTypeBienRequest, ListTypeBienResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListTypeBienRequest, ListTypeBienResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service prorietaire.Comptes
 */
export interface IComptesClient {
    /**
     * @generated from protobuf rpc: ChiffreAffaires(prorietaire.ChiffreAffairesRequest) returns (prorietaire.ChiffreAffairesResponse);
     */
    chiffreAffaires(input: ChiffreAffairesRequest, options?: RpcOptions): UnaryCall<ChiffreAffairesRequest, ChiffreAffairesResponse>;
}
/**
 * @generated from protobuf service prorietaire.Comptes
 */
export class ComptesClient implements IComptesClient, ServiceInfo {
    typeName = Comptes.typeName;
    methods = Comptes.methods;
    options = Comptes.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ChiffreAffaires(prorietaire.ChiffreAffairesRequest) returns (prorietaire.ChiffreAffairesResponse);
     */
    chiffreAffaires(input: ChiffreAffairesRequest, options?: RpcOptions): UnaryCall<ChiffreAffairesRequest, ChiffreAffairesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChiffreAffairesRequest, ChiffreAffairesResponse>("unary", this._transport, method, opt, input);
    }
}
