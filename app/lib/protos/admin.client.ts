// @generated by protobuf-ts 2.9.4 with parameter server_none
// @generated from protobuf file "admin.proto" (package "admin", syntax proto3)
// tslint:disable
import { Database } from "./admin";
import { Location } from "./admin";
import type { ListClientResponse } from "./admin";
import type { ListClientRequest } from "./admin";
import type { ListBienResponse } from "./admin";
import type { ListBienRequest } from "./admin";
import type { NewLocationResponse } from "./admin";
import type { NewLocationRequest } from "./admin";
import { Imports } from "./admin";
import type { ImportCommissionRequest } from "./admin";
import type { ImportLocationRequest } from "./admin";
import type { Empty } from "./admin";
import type { ImportBienRequest } from "./admin";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import { Comptes } from "./admin";
import type { GainResponse } from "./admin";
import type { GainRequest } from "./admin";
import type { ChiffreAffaireResponse } from "./admin";
import type { ChiffreAffaireRequest } from "./admin";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Auth } from "./admin";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { LoginResponse } from "./admin";
import type { LoginRequest } from "./admin";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service admin.Auth
 */
export interface IAuthClient {
    /**
     * @generated from protobuf rpc: Login(admin.LoginRequest) returns (admin.LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse>;
}
/**
 * @generated from protobuf service admin.Auth
 */
export class AuthClient implements IAuthClient, ServiceInfo {
    typeName = Auth.typeName;
    methods = Auth.methods;
    options = Auth.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Login(admin.LoginRequest) returns (admin.LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginRequest, LoginResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service admin.Comptes
 */
export interface IComptesClient {
    /**
     * @generated from protobuf rpc: ChiffreAffaire(stream admin.ChiffreAffaireRequest) returns (stream admin.ChiffreAffaireResponse);
     */
    chiffreAffaire(options?: RpcOptions): DuplexStreamingCall<ChiffreAffaireRequest, ChiffreAffaireResponse>;
    /**
     * @generated from protobuf rpc: Gain(stream admin.GainRequest) returns (stream admin.GainResponse);
     */
    gain(options?: RpcOptions): DuplexStreamingCall<GainRequest, GainResponse>;
}
/**
 * @generated from protobuf service admin.Comptes
 */
export class ComptesClient implements IComptesClient, ServiceInfo {
    typeName = Comptes.typeName;
    methods = Comptes.methods;
    options = Comptes.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ChiffreAffaire(stream admin.ChiffreAffaireRequest) returns (stream admin.ChiffreAffaireResponse);
     */
    chiffreAffaire(options?: RpcOptions): DuplexStreamingCall<ChiffreAffaireRequest, ChiffreAffaireResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChiffreAffaireRequest, ChiffreAffaireResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: Gain(stream admin.GainRequest) returns (stream admin.GainResponse);
     */
    gain(options?: RpcOptions): DuplexStreamingCall<GainRequest, GainResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GainRequest, GainResponse>("duplex", this._transport, method, opt);
    }
}
/**
 * @generated from protobuf service admin.Imports
 */
export interface IImportsClient {
    /**
     * @generated from protobuf rpc: Bien(stream admin.ImportBienRequest) returns (admin.Empty);
     */
    bien(options?: RpcOptions): ClientStreamingCall<ImportBienRequest, Empty>;
    /**
     * @generated from protobuf rpc: Location(stream admin.ImportLocationRequest) returns (admin.Empty);
     */
    location(options?: RpcOptions): ClientStreamingCall<ImportLocationRequest, Empty>;
    /**
     * @generated from protobuf rpc: Commission(stream admin.ImportCommissionRequest) returns (admin.Empty);
     */
    commission(options?: RpcOptions): ClientStreamingCall<ImportCommissionRequest, Empty>;
}
/**
 * @generated from protobuf service admin.Imports
 */
export class ImportsClient implements IImportsClient, ServiceInfo {
    typeName = Imports.typeName;
    methods = Imports.methods;
    options = Imports.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Bien(stream admin.ImportBienRequest) returns (admin.Empty);
     */
    bien(options?: RpcOptions): ClientStreamingCall<ImportBienRequest, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ImportBienRequest, Empty>("clientStreaming", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: Location(stream admin.ImportLocationRequest) returns (admin.Empty);
     */
    location(options?: RpcOptions): ClientStreamingCall<ImportLocationRequest, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ImportLocationRequest, Empty>("clientStreaming", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: Commission(stream admin.ImportCommissionRequest) returns (admin.Empty);
     */
    commission(options?: RpcOptions): ClientStreamingCall<ImportCommissionRequest, Empty> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ImportCommissionRequest, Empty>("clientStreaming", this._transport, method, opt);
    }
}
/**
 * @generated from protobuf service admin.Location
 */
export interface ILocationClient {
    /**
     * @generated from protobuf rpc: NewLocation(admin.NewLocationRequest) returns (admin.NewLocationResponse);
     */
    newLocation(input: NewLocationRequest, options?: RpcOptions): UnaryCall<NewLocationRequest, NewLocationResponse>;
    /**
     * @generated from protobuf rpc: ListBien(admin.ListBienRequest) returns (admin.ListBienResponse);
     */
    listBien(input: ListBienRequest, options?: RpcOptions): UnaryCall<ListBienRequest, ListBienResponse>;
    /**
     * @generated from protobuf rpc: ListClient(admin.ListClientRequest) returns (admin.ListClientResponse);
     */
    listClient(input: ListClientRequest, options?: RpcOptions): UnaryCall<ListClientRequest, ListClientResponse>;
}
/**
 * @generated from protobuf service admin.Location
 */
export class LocationClient implements ILocationClient, ServiceInfo {
    typeName = Location.typeName;
    methods = Location.methods;
    options = Location.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: NewLocation(admin.NewLocationRequest) returns (admin.NewLocationResponse);
     */
    newLocation(input: NewLocationRequest, options?: RpcOptions): UnaryCall<NewLocationRequest, NewLocationResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<NewLocationRequest, NewLocationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListBien(admin.ListBienRequest) returns (admin.ListBienResponse);
     */
    listBien(input: ListBienRequest, options?: RpcOptions): UnaryCall<ListBienRequest, ListBienResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListBienRequest, ListBienResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListClient(admin.ListClientRequest) returns (admin.ListClientResponse);
     */
    listClient(input: ListClientRequest, options?: RpcOptions): UnaryCall<ListClientRequest, ListClientResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListClientRequest, ListClientResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service admin.Database
 */
export interface IDatabaseClient {
    /**
     * @generated from protobuf rpc: Reset(admin.Empty) returns (admin.Empty);
     */
    reset(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty>;
}
/**
 * @generated from protobuf service admin.Database
 */
export class DatabaseClient implements IDatabaseClient, ServiceInfo {
    typeName = Database.typeName;
    methods = Database.methods;
    options = Database.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Reset(admin.Empty) returns (admin.Empty);
     */
    reset(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Empty>("unary", this._transport, method, opt, input);
    }
}
